//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerA"",
            ""id"": ""81cb147f-d7a5-48ec-a758-bb0f9070f144"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""484b7d77-a6dd-4fc1-a041-fe86230c2a2f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""557dfbdf-50c0-45ec-ad23-c04628615be6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e2e12557-d864-4ebb-ae1d-bff31d1f3aec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4dc712a2-047c-4644-a5fb-1e49905d26bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""62bbe5e3-d624-43f7-b7d7-b143d67a78f4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca79b4c8-4e07-44a1-bf34-8643acdc28cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerB"",
            ""id"": ""6eedf57c-cad8-4486-bb4c-a2442919b961"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8e9684f8-5092-4a6c-a0aa-a56037b2b4f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""77c618e5-9d21-4405-9c9c-2856541b40dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7969ae6b-c666-4cf3-b5f7-622a048b24cd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bb3fb0ec-47a3-428e-b178-4b55fa594986"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f57bb956-a871-4475-b7d6-91e6b2363c73"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e34a57a6-c1cb-4dcf-8bfd-2d0d37866cdf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerA
        m_PlayerA = asset.FindActionMap("PlayerA", throwIfNotFound: true);
        m_PlayerA_Movement = m_PlayerA.FindAction("Movement", throwIfNotFound: true);
        // PlayerB
        m_PlayerB = asset.FindActionMap("PlayerB", throwIfNotFound: true);
        m_PlayerB_Movement = m_PlayerB.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerA
    private readonly InputActionMap m_PlayerA;
    private IPlayerAActions m_PlayerAActionsCallbackInterface;
    private readonly InputAction m_PlayerA_Movement;
    public struct PlayerAActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerAActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerA_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAActions instance)
        {
            if (m_Wrapper.m_PlayerAActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerAActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerAActions @PlayerA => new PlayerAActions(this);

    // PlayerB
    private readonly InputActionMap m_PlayerB;
    private IPlayerBActions m_PlayerBActionsCallbackInterface;
    private readonly InputAction m_PlayerB_Movement;
    public struct PlayerBActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerBActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerB_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerB; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBActions instance)
        {
            if (m_Wrapper.m_PlayerBActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerBActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerBActions @PlayerB => new PlayerBActions(this);
    public interface IPlayerAActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerBActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
